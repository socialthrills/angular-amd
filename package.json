{
  "author": {
    "name": "EF Education First"
  },
  "name": "angular-amd",
  "version": "1.6.0",
  "branchVersion": "1.*",
  "homepage": "http://www.ef.com",
  "licenses": {
    "type": "TODO",
    "url": "ADD LICENSING URL"
  },
  "bugs": {
    "url": "https://github.com/EFEdcuationFirstMobile/angular-amd/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/EFEdcuationFirstMobile/angular-amd"
  },
  "main": "./src/compiler/amd-compiler",
  "bin": {},
  "engines": {
    "node": ">= 0.10.0"
  },
  "dependencies": {
    "lodash": "~2.4.1",
    "minimist": "0.0.8",
    "process": "^0.7.0",
    "uglify-js": "~2.4.13",
    "winston": "~0.7.2"
  },
  "devDependencies": {
    "grunt": "~0.4.2",
    "grunt-karma": "~0.8.0",
    "grunt-bump": "0.0.11",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-copy": "~0.4.1",
    "grunt-contrib-jshint": "~0.7.2",
    "grunt-contrib-watch": "~0.5.3",
    "grunt-contrib-concat": "~0.3.0",
    "grunt-contrib-uglify": "~0.2.7",
    "grunt-conventional-changelog": "~1.0.0",
    "grunt-jsbeautifier": "~0.2.4",
    "load-grunt-tasks": "~0.2.0",
    "karma-phantomjs-launcher": "~0.1.2",
    "karma-jasmine": "~0.2.2",
    "karma-firefox-launcher": "~0.1.3",
    "karma-coverage": "~0.2.0",
    "execSync": "~1.0.0",
    "grunt-simple-mocha": "~0.4.0",
    "chai": "~1.9.0",
    "mocks": "0.0.15"
  },
  "readme": "### Angular asynchronous module definition [![Build Status](https://travis-ci.org/EFEdcuationFirstMobile/angular-amd.png?branch=master)](https://travis-ci.org/EFEdcuationFirstMobile/angular-amd)\n\nThis repository provides:\n- Bower package, adds amd support to your angular project.\n- Npm module, adds a compiler to generate concat/min files of your project.\n\n## AMD Support\n\n### TL;DR\n\nThe base principal is, one module === one file.\n\n```javascript\n\n// /feature/loader.js\nangular.amd.module('feature.loader', [])\n.service('Loader', function () {\n\n});\n\n// main app file (app.js)\nangular.amd.module('myApp', [\n    'feature.loader'\n]).controller('MainCtrl', function () {\n    angular.resumeBootstrap();\n});\n```\n\n### Installation\n\nIf you are using [Bower](http://bower.io/) (you should) then all you need to do is:\n\n- Add `\"ng-amd\": \"latest\"` to your project `bower.json`.\n- run `bower install`.\n\n#### Angular bootstrap process\n\nBy including angular-amd(.min?).js the bootstrap process will automatically halted (And your app will not start!) and needs to be resumed manually with ```angular.resumeBootstrap();```. This is due to we need to wait for all modules to load async, then start the application.\n\n\n#### Module name patterns\n\nA module name will translate in to a file path:\n\n```javascript\n'feature.loader' => /feature/loader.js\n```\n\n#### angular.amd.module\n\nWhen you declare a module ```angular.amd.module``` it will return a ```$q.defer().promise``` that is extended with all methods the regular ```angular.module``` api. Hence you can go:\n\n```javascript\nangular.amd.module('myApp', [\n    'feature.loader'\n]).controller('MainCtrl', function () {\n    // Ctrl stuff\n}).then(function (module) {\n    angular.resumeBootstrap();\n});\n```\n\n#### ES6 module syntax\n\nAll import statements can also be written in ES6 syntax:\n\n```javascript\n'import Loader from \"feature.loader\"';          // import Loader from module \"feature.loader\" via $injector.get\n'module fl from \"feature.loader\"';              // binding an external module to a variable\n'import { encrypt, decrypt } from \"crypto\"';    // import encrypt, decryp from module \"crypto\" via $injector.get\n'import { encrypt as enc } from \"crypto\"';      // binding and renaming encrypt to enc\n```\n\nCurrently all modules will be passed as dependencies to ```angular.module``` and therefore is accessibly anyway. When using the ES6 syntax all symbols and aliases are set to the new module using ```angular.module().constant```. But it's fun to use ES6.\n\n\n## Compiler\n\n### TL;DR\n\nGet the minified/uglified source in the *right order* for amd loading.\n\n```javascript\n    var amd = require('angular-amd');\n    var options = {\n        sourceFolder: '/src',\n    };\n    var concatenated = amd.start(options);\n```\n\n### How it works:\n\nThe compiler resolves the dependecies between all the modules collected from a single folder, returning the concatenated code, which you can further process or write to a file.\n\nThe critical role of the compiler is to guarantee that the *order of the source code* in the compiled output *satisties the dependency chain* load order.\n\nIt takes a `sourceFolder`, colects all the files, builds an ordered list of files and, optionally, relays that list to [uglifyJS](https://github.com/mishoo/UglifyJS2) in order to minify/uglify the code, or simply returns the concatenated source.\n\n\n### Options\n\nMandatory:\n\n- **sourceFolder** [string] - where to look for module files and dependencies.\n\nOptional:\n\n- **filter** [function] - File filtering function. Defaults to matching all `.js` files, excluding all `.spec.js`. Default implementation: `function (file) { return !/spec\\.js$/.test(file) && /\\.js$/.test(file); }`.\n- **sourceFiles** [string] - Use this list of files instead of the files found in the `sourceFolder`.\n- **uglify** [obbject] - If provided, triggers minification via uglifyJS with these options. See [uglifyJS options](https://github.com/mishoo/UglifyJS2).\n\n### Using the compiler in Grunt\n\nTo use the compiler as grunt task, add this to your `Gruntfile.js`:\n\n```javascript\n    var amd = require('angular-amd');\n\n    grunt.registerMultiTask('angularamd', 'Compile angular-amd', function (target) {\n        var options = {};\n\n        // Iterate over all src-dest file pairs.\n        this.files.forEach(function (file) {\n            // iterate over all src\n            file.src.forEach(function (filePath) {\n                options.sourceFolder = filePath;\n                // compile each src in that order and concatenate\n                output += amd.start(options);\n            });\n\n            grunt.file.write(file.dest, output);\n\n            // Print a success message.\n            grunt.log.writeln('File \"' + file.dest + '\" created.');\n        });\n    });\n\n    var taskConfig = {\n        angularamd: {\n            compile: {\n                // options relayed to uglifyJS\n                options: {\n                    mangle: false,\n                    compress: false,\n                    beautify: true\n                },\n                src: [\n                    // predetermine order (make sure no module in foo depends on a module in bar)\n                    'src/foo', // the order of all the files in /foo will be resolved first\n                    'src/bar'  // then the order of all the files in /bar\n                ],\n\n                dest: 'dist/lib-name.js'\n            }\n        }\n    }\n```\n\n### Installation\n\nIf you are using [npm](http://npmjs.org/) (you should) then all you need to do is:\n\n- Add `\"angular-amd\": \"https://github.com/EFEdcuationFirstMobile/angular-amd/archive/v1.4.0.tar.gz\"` to your project `package.json`.\n- run `npm install`.\n\n",
  "readmeFilename": "Readme.md",
  "description": "This repository provides: - Bower package, adds amd support to your angular project. - Npm module, adds a compiler to generate concat/min files of your project.",
  "_id": "angular-amd@1.6.0",
  "_shasum": "583650c2dea50a6081e1c7bda3723f7177a8cc46",
  "_from": "https://github.com/EFEdcuationFirstMobile/angular-amd/archive/v1.6.0.tar.gz",
  "_resolved": "https://github.com/EFEdcuationFirstMobile/angular-amd/archive/v1.6.0.tar.gz"
}
